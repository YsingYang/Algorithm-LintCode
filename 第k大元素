class Solution {
/**
  这道题最主要的还是对k的处理,如果k处理不得到会出现runtime error
**/
public:
    /*
     * param k : description of k
     * param nums : description of array and index 0 ~ n-1
     * return: description of return
     */
    int kthLargestElement(int k, vector<int> nums) {
        // write your code here
        if(k <= 0 )
            return 0;
        return quickSort(nums.size() - k, 0, nums.size() - 1, nums);
        
    }
    
    int quickSort(int k, int front, int rear, vector<int> &nums){
        //cout<<front <<"   "<<rear<<"   ";
        int f = front , r = rear;
        int polt = nums[front];
        while(f < r){
            while(f < r && nums[r] > polt){
                --r;
            }
            if(f < r)
                nums[f++] = nums[r];
            while(f < r && nums[f] <= polt){//这里会不会出错?
                ++f;
            }
            if(f < r)
                nums[r--] = nums[f];
        }
        //cout<<f <<"   "<<r<<endl;
        nums[f] = polt;
        /*for(auto i:nums){
            cout<<i<<"  ";
        }
        cout<<endl;*/
        if(f == k){
            return nums[f];
        }
        else if(f > k){
            return quickSort(k, front, f - 1, nums);
        }
        else{
            return quickSort(k, f + 1, rear, nums);
        }
    }
};


//from heapq import heapify, heappop

class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        heapify(nums)
        for i in range(len(nums) - k) :
            heappop(nums)
        return heappop(nums)
        


class Solution(object):
    def findKthLargest(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        pivot = nums[0]
        left = [i for i in nums if i < pivot]
        equal = [i for i in  nums if i == pivot]
        right = [i for i in  nums if i > pivot]
        
        if k <= len(right):
            return self.findKthLargest(right, k)
        elif k - len(right) <= len(equal):
            return equal[0]
        else:
            return self.findKthLargest(left, k - len(right) - len(equal))
