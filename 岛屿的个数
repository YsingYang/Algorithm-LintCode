class Solution {
public:
    /**
     * @param grid a boolean 2D matrix
     * @return an integer
     */
    int numIslands(vector<vector<bool>>& grid) {
        // Write your code here
        if (grid.empty())
            return 0;
        int res = 0;
        queue<pair<int, int>> que;
        int rs = grid.size(), cs = grid[0].size();
        vector<vector<int>> direction = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        for(int i = 0; i < grid.size(); ++i){
            for(int j = 0; j < grid[0].size(); ++j){
                if(grid[i][j]){
                    ++res;
                    que.emplace(i,j);
                    while(!que.empty()){
                        int x = que.front().first;
                        int y = que.front().second;
                        que.pop();
                        grid[x][y] = false;
                        for(int d = 0; d < 4; ++d){
                            int nx = x + direction[d][0];
                            int ny = y + direction[d][1];
                            if(nx < 0 || nx >= rs || ny < 0 || ny >= cs || grid[nx][ny] == false)
                                continue;
                            que.emplace(nx, ny);
                        }
                    }
                }
            }
        }
        return res;
    }
};
