class Solution {
#define nestedList List
vector<int> res;
public:
    // @param nestedList a list of NestedInteger
    // @return a list of integer
    vector<int> flatten(vector<NestedInteger> &nestedList) {
        // Write your code here
        recursive(nestedList);
        return res;
    }
    
    void recursive(vector<NestedInteger> &nestedList){
        for(int i = 0 ; i < nestedList.size() ; ++i){
            if(List[i].isInteger())
                res.push_back(List[i].getInteger());
            else{
                vector<NestedInteger> tmp = List[i].getList();
                recursive(tmp);
            }
        }    
    }
};

/**
  如果不用栈需要尽可能的减少拷贝赋值操作,否则会一直TLE
  class Solution {
#define nestedList List
public:
    // @param nestedList a list of NestedInteger
    // @return a list of integer
    vector<int> flatten(vector<NestedInteger> &nestedList) {
        // Write your code here
        stack<pair<vector<NestedInteger>,int>> st;
        vector<int> res;
        int index = 0;
        while(!st.empty() || index != List.size()){
            if(index == List.size()){
                //List = move(st.top().first);
                swap(List,st.top().first);
                index = st.top().second;
                st.pop();
                continue;
            }
            if(List[index].isInteger()){
                res.push_back(List[index].getInteger());
                 ++index;
            }
            else{
                st.emplace(List,index+1);//pair.second表示下一个的起始点
                vector<NestedInteger> tmp = move(List[index].getList());
                swap(List,tmp);
                index = 0;
            }
        }
        return res;
    }
};
*/
///非递归情况要注意执行拷贝构造函数的次数，只要尽可能减少拷贝构造函数的次数，那么就可以得到比较好的Runtime
class Solution {
#define nestedList List
public:
    // @param nestedList a list of NestedInteger
    // @return a list of integer
    using NL = NestedInteger;
    vector<int> flatten(vector<NestedInteger> &nestedList) {
        // Write your code here
        stack<NL> st;
        vector<int> res;
        getList(List,st);
        while(!st.empty()){
            NL tmp = move(st.top()); //这里用move runtime缩小了接近一半
            st.pop();
            if(tmp.isInteger()){
                res.push_back(tmp.getInteger());
            }
            else{
                vector<NL> next = tmp.getList(); 
                // 这里tmp.getList()返回的是一个引用，所以返回值并不会执行一次拷贝构造
                getList(next,st);
            }
        }
        reverse(res.begin(),res.end());
        return res;
        
    }
    
    void getList(const vector<NL> &List , stack<NL>&st){
        for(int i = 0 ; i < List.size() ; ++i){
            st.push(List[i]);
        }
    }
};


class Solution(object):

    # @param nestedList a list, each element in the list 
    # can be a list or integer, for example [1,2,[1,2]]
    # @return {int[]} a list of integer
    def flatten(self, nestedList):
        # Write your code here
        res = []
        if isinstance(nestedList,int):
            return [nestedList]
        for i in nestedList:
            if isinstance(i,list):
                res +=  self.flatten(i)
            else:
                res.append(i)
        return res
        
