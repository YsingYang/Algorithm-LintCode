class Solution {
public:
    /**
     * @param root: The root of the binary search tree.
     * @param k1 and k2: range k1 to k2.
     * @return: Return all keys that k1<=key<=k2 in ascending order.
     */
    vector<int> searchRange(TreeNode* root, int k1, int k2) {
        // write your code here
        vector<int> res;
        preTravel(root,res,k1,k2);
        return res;
    }
    
    void preTravel(TreeNode* root,vector<int> &res,int k1,int k2){
        if(!root)
            return ;
        preTravel(root->left,res,k1,k2);
        if(k1 <= root->val && root->val <=k2){
            res.push_back(root->val);
        }
        else if(root->val > k2)
            return;
        preTravel(root->right,res,k1,k2);
    }
};

class Solution:
    """
    @param root: The root of the binary search tree.
    @param k1 and k2: range k1 to k2.
    @return: Return all keys that k1<=key<=k2 in ascending order.
    """     
    def searchRange(self, root, k1, k2):
        # write your code here
        res = []
        self.preTravel(root,res,k1,k2)
        return res
    
    def preTravel(self,root,res,k1,k2):
        if(root == None):
            return 
        self.preTravel(root.left,res,k1,k2)
        if root.val >= k1 and root.val <= k2 :
            res.append(root.val)
        self.preTravel(root.right,res,k1,k2)
