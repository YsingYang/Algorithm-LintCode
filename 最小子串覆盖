//Sliding Windows
class Solution {
public:    
    /**
     * @param source: A string
     * @param target: A string
     * @return: A string denote the minimum window
     *          Return "" if there is no such a string
     */
    string minWindow(string &source, string &target) {
        // write your code here
        string res;
        vector<int> mp(128,0);
        int count = 0;
        for(int i = 0 ; i < target.size() ; ++i){
            count += (++mp[target[i]] == 1); 
        }
        
        int fast = 0 , slow = 0;
        while(fast < source.size()){
            //cout<<fast<<"  "<<slow<<endl;
            count -= (--mp[source[fast++]] == 0);
            if(count == 0){
                while(slow <= fast && count <= 0){
                    if(res.empty() || res.size() > fast - slow) ////注意求子串的这句放在这里
                        res = source.substr(slow,fast - slow);
                    count += (++mp[source[slow++]] == 1);
                }
            }
        }
        return res;
    }
};

class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        mp = dict()
        for i in t:
            if i not in mp:
                mp[i] = 1
            else:
                mp[i] += 1
        count, fast , slow =len(t), 0 , 0
        res = str()
        while fast < len(s):
            #print(fast,slow)
            if s[fast] in mp:
                mp[s[fast]] -= 1
                if mp[s[fast]] >= 0:
                    count -= 1
            fast += 1
            if count == 0 :
                while slow <= fast and count == 0:
                    if s[slow] in mp:
                        if len(res) == 0 or len(res) > fast - slow :
                            res = s[slow:fast]
                        mp[s[slow]] += 1
                        if mp[s[slow]] >= 1:
                            count += 1
                    slow += 1
        return res
            
            
       
