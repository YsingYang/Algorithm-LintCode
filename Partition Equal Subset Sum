//垃圾LintCode竟然不能用bitset ...

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        bitset<5001> bits(1);
        int sum = accumulate(nums.begin(), nums.end(), 0);
        for (auto n : nums) bits |= bits << n;
        return !(sum & 1) && bits[sum >> 1];
    }
};

class Solution {
public:
    /**
     * @param nums a non-empty array only positive integers
     * @return return true if can partition or false
     */
    bool canPartition(vector<int>& nums) {
        // Write your code here
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if(sum & 1)
            return false;
        int size = sum >> 1;
        vector<bool> dp(size+1, 0);
        dp[0] = 1;
        for(int i = 0; i < nums.size(); ++i){
            for(int j = size; j > 0; --j){
                if(j - nums[i] < 0)
                    continue;
                dp[j] = dp[j - nums[i]] | dp[j];
            }
        }
        return dp[size];
    }
};
