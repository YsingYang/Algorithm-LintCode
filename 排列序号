class Solution {
public:
    /**
     * @param A an integer array
     * @return a long integer
     * 简单的用到全排列的一些特性, 假设A为[4, 2, 1, 3]
     * 1. A[0] = 4, 且4为排序后的第四个数字, 证明后面3个数字的全排列已经出现过 (4 - 1) * 3!次, 我们就可以算到A[0] = 4时经过的全排列
     * 而后, 进入递归计算子数组的就可以得到最后的结果了
     * 
     */
    long long permutationIndex(vector<int>& A) {
        // Write your code here
        int size = A.size();
        return index(&A[0], size);
        
    }
    
    long long index(int A[], int n){
        if(n == 1)
            return 1;
        vector<int> vec(A, A + n);
        sort(vec.begin(), vec.end());
        int idx = 1;
        while(idx <= n && vec[idx - 1] != A[0]){
            ++idx;
        }
        return max(0, idx - 1) * factorial(n-1) + index(&A[1], n-1);
    }
    
    long long factorial(int k){
        if(k <= 0)
            return 0;
        if(k == 1){
            return k;
        }
        return k * factorial(k-1);
    }
};
