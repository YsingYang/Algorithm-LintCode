class Solution {
public:
    /**
     * @param k: An integer
     * @param prices: Given an integer array
     * @return: Maximum profit
     */
    int maxProfit(int k, vector<int> &prices) {
        // write your code here
        if(k > prices.size() >> 1){
            int sum = 0;
            for(int i = 1; i < prices.size(); ++i){
                sum += prices[i] - prices[i-1] > 0 ? prices[i] - prices[i-1] : 0;
            }
            return sum;
        }
        int size = prices.size();
        vector<vector<int>> dp(k + 1, vector<int>({INT_MIN, 0})); //第一个表示hold, 第二个表示sold
        for(int i = 0; i < prices.size(); ++i){
            for(int j = k; j > 0; --j){
                //dp[j][0] = max(dp[j-1][1] - prices[i], dp[j-1][0]); //max(没买入 + 买, 上一个买入)
                //dp[j][1] = max(dp[j-1][0] + prices[i], dp[j-1][1]); //max(卖出上一个, 上一个不卖)
                dp[j][1] = max(dp[j][0] + prices[i], dp[j][1]);
                dp[j][0] = max(dp[j-1][1] - prices[i], dp[j][0]);
            }
            
        }
        return dp[k][1];
    }
};
