class Solution {
public:
    /**
     * @param s1 A string
     * @param s2 Another string
     * @return whether s2 is a scrambled string of s1
     */
    bool isScramble(string& s1, string& s2) {
        // Write your code here
        int size = s1.size(); //默认s1.size == s2.size();
        if(size == 0)
            return true;
        if(size == 1)
            return s1 == s2;
        vector<vector<vector<bool>>> dp(size + 1, vector<vector<bool>> (size, vector<bool>(size, false)));
        //dp[length][s1][s2], 对于dp[i][j][k]表示, s1[j ~ j + i -1] 是否与s2[k ~ k + i - 1]是否为scramble string
        
        //对于length == 1初始化
        for(int i = 0; i < size; ++i){
            for(int j = 0; j < size; ++j){
                dp[1][i][j] = (s1[i] == s2[j]);
            }
        }
        for(int i = 2; i <= size; ++i){
            for(int j = 0; j <= size - i; ++j){
                for(int k = 0; k <= size - i; ++k){//注意j , k的上限
                    
                    for(int len = 1; len < i && !dp[i][j][k]; ++len){ //对len进行遍历
                        dp[i][j][k] = dp[i][j][k] || (dp[len][j][k] && dp[i - len][j + len][k + len]); 
                        //前len 比 前len && 后i - len 比 后i - len
                        dp[i][j][k] = dp[i][j][k] || (dp[len][j+i-len][k] && dp[i - len][j][k + len]);
                        //后len 比 前len && 前i -len 比 后i - len
                    }
                }
            }
        }
        return dp[size][0][0];
    }
};
