//Solution_1 ,使用stable_patition
class Solution {
public:
    /**
     * @param nums an integer array
     * @return nothing, do this in-place
     */
    void moveZeroes(vector<int>& nums) {
        // Write your code here
        stable_partition(nums.begin(),nums.end(),[](const int &a){
           return a!=0; 
        });
    }
};

///Solution_2,简单的two_pointer
／／但会有一种最坏情况如下,0,0,0,0,0,0,0,0,9,8,7,6,5,3,2,1，那么每一次的next,都是在pos之后，但是都需遍历许多无用的00000
class Solution {
public:
    /**
     * @param nums an integer array
     * @return nothing, do this in-place
     */
    void moveZeroes(vector<int>& nums) {
        // Write your code here
        int pos = 0;
        while(pos < nums.size()){
            while(nums[pos] != 0){
                ++pos;
            }
            int next = pos + 1;
            //可以优化
            while(next<nums.size()&&nums[next] == 0 ){
                ++next;
            }
            if(next==nums.size())
                break;
            swap(nums[pos++],nums[next]);
            
        }
    }
};
///Solution_3,我们记录每一个找到数字的next,记录为record,下一个next,由pos + 1,record+1的最大值来决定，runtime得到了很大的提升
class Solution {
public:
    /**
     * @param nums an integer array
     * @return nothing, do this in-place
     */
    void moveZeroes(vector<int>& nums) {
        // Write your code here
        int pos = 0,record = 0;
        while(pos < nums.size()){
            while(nums[pos] != 0){
                ++pos;
            }
            int next = max(record + 1 , pos + 1 );
            //可以优化
            while(next < nums.size() && nums[next] == 0 ){
                ++next;
            }
            if(next==nums.size())
                break;
            record = next;
            swap(nums[pos++],nums[next]);
            
        }
    }
};
