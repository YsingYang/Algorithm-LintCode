class Solution {
/***
  这种方法其实时间复杂度挺高的，因为随着筛子数量增多，会导致ＤＰ数组增大,这样之后的时间复杂度会特别高,感觉这里的数据集并不会特别大,所以能Accept,是否有
  O(n)的方法解决这个问题
  下面Solution思路:
  基本的DP递推过程,通过上一次的概率+上这一次筛子摇到的数字的概率得到这一次和的概率
**/
public:
    /**
     * @param n an integer
     * @return a list of pair<sum, probability>
     */
    vector<pair<int, double>> dicesSum(int n) {
        // Write your code here
        map<int,double> dp;
        for(int i = 1 ; i <= 6 ; ++i){
            dp[i] = 1.0/6;
        }
        for(int i = 1 ; i < n ;++ i){
            map<int,double> tmp;
            for(auto it:dp){
                for(int k = 1 ; k <= 6 ; ++k){
                    tmp[it.first + k] += it.second * 1.0/6;
                }
            }
            dp = tmp;
        }
        vector<pair<int,double>> res;
        for(auto it :dp){
            res.emplace_back(it.first,it.second);
        }
        return res;
    }
};
